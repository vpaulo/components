class t extends HTMLElement{constructor(){super(),this.counter=0,this._shadow=this.attachShadow({mode:"open"})}increment(){this.counter++,this.update()}decrement(){this.counter--,this.update()}update(){this.counterValue.innerHTML=`${this.counter}`}render(){return`\n            <h3>Counter</h3>\n            <span id="counter-content">Button</span>\n            <button id="counter-decrement"> - </button>\n            <span id="counter-value">${this.counter}</span>\n            <button id="counter-increment"> + </button>\n        `}setEvents(){this.incrementButton=this._shadow.querySelector("#counter-increment"),this.decrementButton=this._shadow.querySelector("#counter-decrement"),this.counterValue=this._shadow.querySelector("#counter-value"),this.incrementButton.addEventListener("click",this.increment.bind(this)),this.decrementButton.addEventListener("click",this.decrement.bind(this))}connectedCallback(){this._shadow.innerHTML=this.render(),this.setEvents()}disconnectedCallback(){this.incrementButton.removeEventListener("click",this.increment.bind(this)),this.decrementButton.removeEventListener("click",this.decrement.bind(this))}}const e=t.prototype.connectedCallback,n=t.prototype.render;Object.assign(t.prototype,{connectedCallback:function(){e&&e.call(this)},render:function(){if(n)return this.getStyles()+n.call(this)},getStyles:function(){return"<style>:host{position:relative;font-family:sans-serif}#counter-increment,#counter-decrement{width:60px;height:30px;margin:20px;background:none;border:1px solid #000}#counter-value{font-weight:bold}</style>"}}),window.customElements.get("vp-counter")||(window.CounterElement=t,window.customElements.define("vp-counter",t));
