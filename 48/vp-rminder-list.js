class t extends HTMLElement{constructor(){super(),this.list="tasks",this.listName="Tasks",this.filter="oldest",this.tasks=[],this.attachShadow({mode:"open"})}listChanged(){this.dispatchEvent(this.getListEvent())}filterChanged(){this.dispatchEvent(this.getFilterEvent())}getListEvent(){return new CustomEvent("vp:showList",{detail:{list:this.list},bubbles:!0,composed:!0})}getFilterEvent(){return new CustomEvent("vp:filterUpdate",{detail:{filter:this.filter},bubbles:!0,composed:!0})}tasksChanged({detail:t}={detail:{tasks:[],list:this.list,title:this.listName}}){this.tasks=t.tasks,this.list=t.list,this.listName=t.title,this.titleEl.textContent=this.listName,this.tasksContainer.innerHTML=this.populateTasks(),this.orderFilters.forEach(this.selectFilter.bind(this))}triggerEvent(t){if("addTask"===t.detail.trigger)this.dispatchEvent(this.getAddTaskEvent(t.detail));else{const e={type:t.detail.trigger,id:+t.detail.element.parentNode.host.task};this.dispatchEvent(this.getUpdateTaskEvent(e)),this.setSelected(e)}}getAddTaskEvent(t){return new CustomEvent("vp:addTask",{detail:t,bubbles:!0,composed:!0})}getUpdateTaskEvent(t){return new CustomEvent("vp:updateTask",{detail:t,bubbles:!0,composed:!0})}setSelected(t){"showDetails"===t.type&&(this.tasksContainer.querySelector("vp-list-task.selected")?.classList.remove("selected"),this.tasksContainer.querySelector(`vp-list-task[task="${t.id}"]`)?.classList.add("selected"))}toggleFilter(){this.filterBtn?.classList.toggle("open")}selectFilter(t){t.value===this.filter?t.setAttribute("checked",""):t.removeAttribute("checked")}filterUpdate(t){this.setAttribute("filter",t.target.value)}populateTasks(){return this.tasks.map((t=>`<vp-list-task title="${t.title}" task="${t.id}" complete="${!!t.completed}" important="${!!t.important}" order="0"></vp-list-task>`)).join("")}static get observedAttributes(){return["list","filter"]}attributeChangedCallback(t,e,s){s!==e&&(this[t]=s,this[`${t}Changed`]())}connectedCallback(){this.shadowRoot.innerHTML=this.render(),this.tasksContainer=this.shadowRoot.querySelector(".tasks"),this.titleEl=this.shadowRoot.querySelector(".title"),this.filterBtn=this.shadowRoot.querySelector(".filter"),[...this.orderFilters]=this.filterBtn.querySelectorAll(".order-filter"),this.addEventListener("vp:tasks",this.tasksChanged.bind(this)),this.addEventListener("vp:trigger",this.triggerEvent.bind(this)),this.filterBtn.addEventListener("click",this.toggleFilter.bind(this)),this.orderFilters.forEach((t=>t.addEventListener("change",this.filterUpdate.bind(this))))}disconnectedCallback(){this.removeEventListener("vp:tasks",this.tasksChanged.bind(this)),this.removeEventListener("vp:trigger",this.triggerEvent.bind(this)),this.filterBtn.removeEventListener("click",this.toggleFilter.bind(this)),this.orderFilters.forEach((t=>t.removeEventListener("change",this.filterUpdate.bind(this))))}render(){return`<div class="toolbar">\n      <span class="title">${this.listName}</span>\n      <span class="filter">\n\t \t\t\t<vp-icon icon="icons:filter"></vp-icon>\n\t \t\t\t<div class="filters">\n\t \t\t\t\t<span class="legend">Order by:</span>\n\t \t\t\t\t<label class="switch"><span class="text">Important</span> <input class="order-filter" name="order-filter" type="radio" value="important"> <span class="radio"></span></label>\n\t \t\t\t\t<label class="switch"><span class="text">Oldest</span> <input class="order-filter" name="order-filter" value="oldest" type="radio" checked> <span class="radio"></span></label>\n\t \t\t\t\t<label class="switch"><span class="text">Newest</span> <input class="order-filter" name="order-filter" value="newest" type="radio"> <span class="radio"></span></label>\n\t \t\t\t</div>\n\t\t\t</span>\n    </div>\n    <div class="container">\n      <vp-add-list-task></vp-add-list-task>\n      <div class="tasks">${this.populateTasks()}</div>\n    </div>`}}const e=t.prototype.connectedCallback,s=t.prototype.render;Object.assign(t.prototype,{connectedCallback:function(){e&&e.call(this)},render:function(){return this.getStyles()+(s?s.call(this):"")},getStyles:function(){return'<style>*,::before,::after{box-sizing:border-box}:host{min-width:250px;width:var(--main-width)}:host(.hidden){display:none}.toolbar{display:flex;align-items:center;justify-content:space-between;background-color:#fff;padding:10px 12px;height:var(--size-40)}.title{letter-spacing:2px}.tasks{overflow-y:auto;height:calc(var(--vh) - (2 * var(--size-40) + 60px))}.filter{display:inline-flex;position:relative;width:20px;height:20px;cursor:pointer}.filter.open{color:var(--primary)}.filters{display:none;color:var(--base-color);position:absolute;width:300px;background-color:#fff;padding:20px;top:var(--size-40);margin-top:4px;box-shadow:2px 2px 10px var(--base-color);cursor:auto;right:0;z-index:1}.open .filters{display:block}.filters::before{content:"";width:0;height:0;border-left:10px solid transparent;border-right:10px solid transparent;border-bottom:10px solid #fff;position:absolute;top:-10px;right:0}.legend{margin-bottom:4px;font-size:.9rem;font-weight:600}.switch{display:flex;align-items:center;justify-content:space-between;margin:10px 0}.switch .text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.switch input{display:none}.switch input:checked+.slider{background-color:var(--primary)}.switch input:checked+.slider:before{transform:translateX(20px)}.switch input:checked+.radio{background-color:var(--primary);border-color:var(--primary)}.radio{width:20px;height:20px;border:1px solid var(--base-color);border-radius:10px;position:relative}.radio:before{content:"";width:16px;height:16px;cursor:pointer;position:absolute;border:2px solid #fff;border-radius:8px;top:1px;left:1px}</style>'}}),window.customElements.get("vp-rminder-list")||(window.RminderListElement=t,window.customElements.define("vp-rminder-list",t));
